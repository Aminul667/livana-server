// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @unique @default(uuid())
  email              String        @unique
  password           String
  role               UserRole
  isProfileCompleted Boolean       @default(false)
  provider           UserProviders @default(local)
  isDeleted          Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  profile            Profile?
  property           Property[]
  payment            Payment[]

  @@map("users")
}

model Profile {
  id           String   @id @unique @default(uuid())
  userId       String   @unique
  firstName    String
  lastName     String
  phone        String   @unique
  location     String
  about        String
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Property {
  id           String       @id @default(uuid())
  userId       String
  description  String
  price        Float
  listingType  ListingType
  propertyType PropertyType
  purpose      Purpose

  // Location
  address    String
  city       String
  state      String
  postalCode String
  country    String
  latitude   Float? // optional in Zod
  longitude  Float? // optional in Zod

  // Details
  bedrooms             Int
  bathrooms            Int
  areaSqFt             Float
  floorNumber          Int
  totalFloors          Int? // optional in Zod
  furnished            FurnishedStatus
  coverImage           String
  availableFrom        String
  availableMonth       String
  availableMonthNumber Int

  // Rent Specific
  rentFrequency  RentFrequency?
  depositAmount  Float?
  maintenanceFee Float?

  // Features
  amenities        String[]
  hasParking       Boolean
  hasLift          Boolean
  hasBalcony       Boolean
  heating          Boolean
  cooling          Boolean
  petFriendly      Boolean
  internetIncluded Boolean

  videoUrl   String?
  isFeatured Boolean       @default(false)
  status     ListingStatus @default(draft)
  isDeleted  Boolean       @default(false)

  images PropertyImage[] // relation to image model
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payment   Payment[]

  @@index([userId])
  @@index([latitude])
  @@index([longitude])
  @@index([price])
  @@index([bedrooms])
  @@index([isDeleted, status, createdAt])
  @@map("property")
}

model PropertyImage {
  id         String   @id @default(uuid())
  propertyId String
  url        String // path or full URL
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("property_image")
}

model Payment {
  id            String  @id @default(uuid())
  userId        String
  propertyId    String?
  type          String
  amount        Float
  transactionId String

  user     User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([propertyId])
  @@index([type])
  @@map("payment")
}

enum UserRole {
  landlord
  tenant
  admin
}

enum UserProviders {
  local
  google
  facebook
}

enum ListingType {
  rent
  sale
}

enum PropertyType {
  flat
  house
  villa
  studio
}

enum Purpose {
  residential
  commercial
}

enum FurnishedStatus {
  furnished
  semi_furnished
  unfurnished
}

enum RentFrequency {
  monthly
  half_yearly
  yearly
}

enum ListingStatus {
  draft // saved but unpublished
  published // paid & published
}
